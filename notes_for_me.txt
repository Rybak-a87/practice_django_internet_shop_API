----------------------------------------------------------------------

Созание вертуального окружения:
---
1ый способ:
python -m venv <имя окружения>
---
2ой способ:
pip install virtualenv
virtualenv <имя окружения>
---
Зайти в вертуальное окружение:
-Linux:
source <имя окружения>/bin/activate
-Windows:
<имя окружения>\Scripts\activate
---
-Выйти извертуального окружения:
deactivate

----------------------------------------------------------------------

Файл requirements.txt:
---
Запись в файл:
python freeze > requirements.txt
---
Чтение с файла:
python install -r requirements.txt

----------------------------------------------------------------------

Git:
---
(файл .gitconfig содержит конфигурации Git)
(файл .gitignore содержит наименование папок и файлов которые игнорирует Git)
---
Установить имя пользователя в Git:
git config --global user.name "<имя>"
---
Установить почту пользователя в Git:
git config --global user.email "<почта>"
---
Просмотр конфигураций:
git config --list
---
Создать базу данных .git в репозитории:
git init .
---
Проверка статуса (происходящее в базе Git):
git status
---
Список бренчей:
git branch
---
Создать бренч:
git branch <имя бренча>
---
Перейти на другой бренч:
git checkout <имя бренча>
---
Удаление бренча:
git branch -d <имя бренча>
---
Добавление файлов в репозиторий Git:
git add . (вместо точки можно указать папку или файл)
--
Закрепление в Git:
git commit -m "<описание закрепления>"
---
Копировать проект с сервера:
git clone <ссылка>
---
Отправка обновленного проекта с пк на сервер:
git push
---
Обновление проекта на пк с сервера:
git pull

----------------------------------------------------------------------
Django:
---
Создание проекта:
django-admin startproject <имя проекта> . (точка не создает подкаталог с именем проекта)
---
Создание приложения:
python manage.py startapp <имя приложения>
---
Миграции:
python manage.py makemigrations
python manage.py migrate
---
Созание суперпользователя:
python manage.py createsuperuser
---
Запуск локального сервера:
python manage.py runserver
---
Запуск тестиования
python manage.py test

----------------------------------------------------------------------

Этапы создания API сайта
(пометки по обучению)

1. Установка Django Rest и создание API категорий
    a) Установка Django Rest
    pip install djangorestframework
    b) Подключить приложение Django Rest в файле settings.py
    c) Создать дерикторию <api>
        В ней:
        - __init__.py    (инициализация дериктории)
        - api_views.py    (выдает Json) - 2й шаг
        - serializers.py    (волидирует коректность пост запрос на API url) - 1й шаг
        - urls.py - 3й шаг

2. Создание API товаров и фильтрация товаров

3. API объекта смартфона и API покупателей

4. Пагинация [Django Rest Pagination]

5. POST/PUT Создание и изменение объекта
    a) Postman - приложение чтобы посылать определенные запросы используя представленые параметры и получать ответ

----------------------------------------------------------------------

Онлайн платежи на сайте (django card payments)

1. Для пракпики онлайн платежей stripe.com (зарегестрироватся) (для проведения платежных операций в тестовом режиме)
    docs - https://stripe.com/docs/payments/accept-a-payment (rybak.a87 - Stripe...)
2. Получение секретного ключа клиента
    a) Установить пакет stripe:
    pip install --upgrade stripe
    b) Создать инициация платежа

3. Создание платежа и сохранение заказа

